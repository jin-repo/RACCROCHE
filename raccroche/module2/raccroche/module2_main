#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Nov  5 12:58:51 2020

@author: qiaojixu
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov  4 16:04:49 2020

@author: qiaojixu
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov  4 12:20:36 2020

@author: qiaojixu
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Oct 26 21:14:22 2020

@author: qiaojixu
"""


#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Pipeline of the whole raccroche - Part1: constructing mwm output and recontructing contigs of each ancestors

Initialisation :

    * reading gene family file
    * reading parameetrs


Method :

    * Determine candidate adjacencies by setting gene family restrcitions, gf1 and gf2, and windowSize.
    * Using maximum weight matching on candidated adjaciens


End :

    * all contigs


@author: Qiaoji Xu, lingling.jin@cs.usask.ca, David Sankoff

Oct 2020

contact: qxu062@uottawa.ca, lingling, david.sankoff@uottawa.ca

"""



import os
import sys
import pandas as pd
import os.path
import inspect
#from raccroche.module2.reset_weight import *
#from raccroche.module2.mwm_rewrite import *
#from raccroche.module2.save_mwmoutput import *
from raccroche.module2.contig_module import *

from raccroche.module2 import  GenomeAdj as adj
from raccroche.module2 import  TestGetContigOutput as testcontig





def create_repos(results_dir):
    """
    Create all needed repositories for raccroche run
    It will create:

        - the result directory called results if it does not already exist
       

    Parameters
    ----------
    results_dir : string
        Directory given by user where all result files will be saved
    Returns
    -------
    mwm_input_dir : string
        Directory inside the result dir where all files corresponding to mwminput py files are saved
    java_dir: string
        Dirctory to contain java files
    contigs_dir: string
        Dir under results_dir to save all contigs
    """
    mwm_input_dir = os.path.join(results_dir, "InputPyfile")
    java_dir = os.path.join(results_dir, "InputPyfile/java")
    mwm_dir = os.path.join(results_dir, "InputPyfile/mwmOutput")
    contig_dir = os.path.join( "Contig")
    if not os.path.isdir("../../" + results_dir):
        os.mkdir("../../" + results_dir)
    
    if not os.path.isdir("../../" + mwm_input_dir):
        os.mkdir("../../" + mwm_input_dir)
    if not os.path.isdir("../" + contig_dir):
        os.mkdir("../" + contig_dir)
    if not os.path.isdir("../../" + java_dir):
        os.mkdir("../../" + java_dir)
    if not os.path.isdir("../../" + mwm_dir):
        os.mkdir("../../" + mwm_dir)

    return mwm_input_dir, contig_dir, java_dir, mwm_dir
    #return mwm_input_dir, java_dir, mwm_dir

def abspath(path):
    """
    Method to check path
    """
    isabs = os.path.isabs(path)
    if isabs == True:
        path = path
    else:
        cwd = os.getcwd()
        path = os.path.abspath(os.path.join(cwd, "../..")) + '/' + path
    return path
"""
def result_path(path):
    isabs = os.path.isabs(path)
    if isabs == True:
        path = path
    else:
        cwd = os.getcwd()
        path = os.path.abspath(os.path.join(cwd, "../..")) + '/' + path
    return path
"""
def parse():
    """
    Method to create a parser for command-line options
    """
    import argparse
    parser = argparse.ArgumentParser(description="To run all scripts")
    # Create command-line parser for all options and arguments to give
    parser.add_argument("-g", "--gf", "--genefamily", dest="gf_file",
                        help=("Specify gene family file name"), required=True)
    parser.add_argument("-p", "--pm", "--parameters", dest="parameters_file",
                        help=("Specify parameters file "), required=True)
    parser.add_argument("-r", "--rd", "--resultdir", dest="results_dir",
                        required=True,
                        help=("A directory where saving all outputs "
                             ))
    ##results_dir is just a folder name under 'raccroche'
    return parser.parse_args()



def main(gf_file, parameters_file, results_dir):
    """
    Main method, running all raccroche pipeline
    """
    # Create repositories and define file names

    if len(sys.argv) < 4:
        print ('Usage: ./mwm_main.py gf_file parameters_file  results_dir')
        sys.exit(0)
    
    #create mwm
    mwm_input_dir, contig_dir, java_dir, mwm_dir = create_repos(results_dir)
    data = pd.read_csv(gf_file)
    gf_number = data['GeneFamily'].max()
    parameters_file = open(parameters_file, 'r')
    WindowSize_line = parameters_file.readline()
    WindowSize =  int((WindowSize_line.split('=')[1]).split('$')[0])
    
    TreeNode_name_line = parameters_file.readline()
    TreeNode_name = ((TreeNode_name_line.split('=')[1]).split('$')[0]).split(',')
    
    GF1_line = parameters_file.readline()
    GF1 = ((GF1_line.split('=')[1]).split('$')[0]).split(',')
    GF1 = list(map(int, GF1))
    
    GF2_line = parameters_file.readline()
    GF2 = ((GF2_line.split('=')[1]).split('$')[0]).split(',')
    GF2 = list(map(int, GF2))
    results_dir = abspath(results_dir)
    mwm_run(TreeNode_name, GF1, GF2, WindowSize, results_dir=results_dir, gf_data=data)
    
    ##create contigs
    mwmoutput_path = results_dir + 'InputPyfile/mwmOutput/'
    
    #contig_path =  results_dir + 'contigs/'
    contig_path =  os.path.abspath(os.path.join(os.getcwd(), "../")) + '/' + contig_dir
    java_file_path = abspath(mwm_input_dir) + '/java/'
    java_adj = inspect.getsource(adj)
    #create GenomeAdj.java
    with open(java_file_path + 'GenomeAdj.java', 'w') as outfile1:
        java_adj = java_adj.replace('"""','')
        outfile1.write(java_adj)
        
    #create TestGetContigOutput.java
    java_contig = inspect.getsource(testcontig)
  
    with open(java_file_path + 'TestGetContigOutput.java', 'w') as outfile2:
        java_contig = java_contig.replace('"""','')
        java_contig = java_contig.replace('File("/mwm/output/dir','File("'+mwmoutput_path)
        java_contig = java_contig.replace('= "/mwm/output/dir/','= "'+ mwmoutput_path )
        java_contig = java_contig.replace("the number of gene families", "$"+str(gf_number)+"$")
        java_contig = java_contig.replace('"$', '')
        java_contig = java_contig.replace('$"', '')
        java_contig = java_contig.replace("/contig/save/dir", contig_path + "/Contig")
        outfile2.write(java_contig)
                
    
  
"""
Usage:
python3 raccroche_main  -g genefamily_file -p parameters_file -r results_dir
i.e.
python3 raccroche_main  -g  GeneFamily.csv  -p parameters.txt  -r results/
"""

if __name__ == '__main__':
    OPTIONS = parse()
    main(OPTIONS.gf_file, OPTIONS.parameters_file, OPTIONS.results_dir)
    path3 = abspath(OPTIONS.results_dir)
    java_file_path = os.path.join(path3, 'InputPyfile/java/')
    
    print("Starting generating contigs:>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
    os.chdir(java_file_path)
    os.system("javac TestGetContigOutput.java")
    os.system("java TestGetContigOutput")












